@page "/CharacterCreation/GenerateBenefit/{characterID}"
@using Microsoft.AspNetCore.Html
@using TravellerWiki.Data
@using TravellerWiki.Data.Charcters
@using TravellerWiki.Data.Services
@using TravellerWiki.Data.Services.CareerService
@using  TravellerWiki.Pages.CharacterCreation.CharacterCreator;
@using CharacterCreatorService = TravellerWiki.Data.CharacterCreation.CharacterCreatorService
@inject NavigationManager NavManager
@inject MultiPageCharacterCreationService MultiCharacterCreationService
@inject TravellerNationsCharacterInfoService nationsService;
<head>
    <title>@this.ToString().Replace("TravellerWiki.Pages.", "") </title>

</head>

@code{

    [Parameter]
    public string characterID { get; set; }

    public CharacterCreatorService GetService()
    {
        return MultiCharacterCreationService.GetCharacterCreatorService(characterID);
    }


    public Dictionary<int, int> GeneratedBenefits;
    int chosenBenefitRoll = -1;

    public TravellerCareer GetCareer()
    {
        if (GetService().FirstTermOfJob)
        {
            var Currentcareer = GetService().PreviousCareers.Pop();
            var retCar = GetService().PreviousCareers.Peek().Career;
            GetService().PreviousCareers.Push(Currentcareer);
            return retCar;
        }
        else
        {
            return GetService().LastCareer;
        }
    }

    public void GenerateBenefits()
    {
        GeneratedBenefits = GetService().GenerateBenefits();

        //We are a group of assholes. So you don't get to apply anything worse then possible.
        if (GetService().BenefitRollModifiers.Count > 0)
        {
            int benefitsToApply = 0;
            if (GetService().BenefitRollModifiers.Count < GeneratedBenefits.Count)
            {
                benefitsToApply = GetService().BenefitRollModifiers.Count;

            }
            else
            {
                benefitsToApply = GeneratedBenefits.Count;
            }

            //Loop over, one for each benefit!
            for (int i = 0; i <benefitsToApply ; i++)
            {
                GeneratedBenefits[i] += GetService().BenefitRollModifiers[i];

                //First Get what is smaller, 6 or the Generated Benefit. Then Get what is larger, the benefit or 0. Therefore it is between 0-6 [1-7]
                GeneratedBenefits[i] = Math.Max(Math.Min(6, GeneratedBenefits[i]), 0);
            }
        }
    }

    private int GetChosenBenefitNumber()
    {
        CheckBenefitRollWithinRange();

        var result = GeneratedBenefits[chosenBenefitRoll];
        GeneratedBenefits.Remove(chosenBenefitRoll);
        StateHasChanged();

        return result;
    }

    private void CheckBenefitRollWithinRange()
    {
        if (chosenBenefitRoll < 0)
        {
            chosenBenefitRoll = 0;
        }

        if (chosenBenefitRoll > GeneratedBenefits.Count)
        {
            chosenBenefitRoll = GeneratedBenefits.Count - 1;
        }

        if (!GeneratedBenefits.ContainsKey(chosenBenefitRoll))
        {
            foreach(var key in GeneratedBenefits.Keys)
            {
                chosenBenefitRoll = key;
                return;
            }
        }
    }

    #region Cash and benefits select and applied

    public void SelectCash()
    {
        GetService().SelectBenefit(GetChosenBenefitNumber(), true);
    }

    public void SelectBenefit()
    {
        GetService().SelectBenefit(GetChosenBenefitNumber(), false);
    }

    public void ApplyBenefits()
    {
        NavManager.NavigateTo($"/CharacterCreation/ApplyBenefit/{characterID}");
    }

    public void DoneGeneratingBenefits()
    {
        NavManager.NavigateTo($"/CharacterCreation/Finished/{characterID}");
    }
    #endregion
}
<body>

    <div>
        <h1>Traveller Character Creator</h1>
        <div class="creatorMarkup">
            <h2>Select @GetService().Name's - Benefits</h2>
            <CharacterCreationDrawStats CharacterID="@characterID" />
            <div style="padding-left: 2em;">
                @if (GeneratedBenefits == null)
                {
                    GenerateBenefits();
                }


                <p>You have: @GetService().NumberOfBenefitRolls benefit rolls for the @GetCareer().CareerName with the following modifiers:  @(GetService().BenefitRollModifiers.Count > 0 ? @GetService().BenefitRollModifiers.Aggregate("", (h, t) => h += ", " + t).Remove(0, 1) : "None")</p>
                <p>
                    The @GetCareer().CareerName Benefit Table looks like:
                    <table>
                        <thead>
                            <tr>
                                <th style="width:2%">Number</th>
                                <th style="width:10%">Cash/Money</th>
                                <th style="">Benefit</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < GetCareer().MusteringOutBenefits.Count; i++)
                            {
                                <tr><td>@(i)</td><td>Cr @GetCareer().MusteringOutBenefits[i].Cash</td><td>@GetCareer().MusteringOutBenefits[i].Benefit</td></tr>
                            }
                        </tbody>
                    </table>
                </p>
                @if (GeneratedBenefits.Count > 0)
                {
                    <p>You have: @(GeneratedBenefits.Any() ? GeneratedBenefits.Aggregate("", (h, t) => h += ", " + t.Value).Remove(0, 1) : "None") remaining.</p>
                    <p>
                        Select Benefit Roll to use
                        <select @bind="chosenBenefitRoll">
                            @foreach (var roll in GeneratedBenefits)
                            {
                                <option value="@roll.Key">@roll.Value</option>
                            }
                        </select>
                    </p>
                    <p>
                        <button @onclick="SelectCash">Cash</button> or <button @onclick="SelectBenefit"> Benefit </button>
                    </p>
                }
                else
                {
                    @if (GetService().ChosenBenefits.Count > 0)
                    {
                        <button @onclick="ApplyBenefits">Apply Benefits.</button>
                    }
                    else
                    {
                        <button @onclick="DoneGeneratingBenefits">Done Benefits.</button>
                    }
                }
            </div>
        </div>
    </div>
</body>