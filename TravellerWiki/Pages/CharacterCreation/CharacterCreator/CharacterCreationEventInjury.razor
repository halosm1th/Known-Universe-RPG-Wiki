@page "/CharacterCreation/EventInjury/{characterID}"
@using CharacterCreationTest.CharacterCreation
@using Microsoft.AspNetCore.Html
@using TravellerWiki.Data
@using TravellerWiki.Data.Charcters
@using TravellerWiki.Data.CreationEvents
@using TravellerWiki.Data.Services
@using TravellerWiki.Data.Services.CareerService
@using TravellerWiki.Data.TravellerInjuries
@inject NavigationManager NavManager
@inject MultiPageCharacterCreationService MultiCharacterCreationService
@inject TravellerNationsCharacterInfoService nationsService;
<head>
    <title>@this.ToString().Replace("TravellerWiki.Pages.", "") </title>

</head>

@code{
    [Parameter]
    public string characterID { get; set; }

    public CharacterCreatorService GetService()
    {
        return MultiCharacterCreationService.GetCharacterCreatorService(characterID);
    }
    
    public void DoneEvent()
    {
        GetService().GainBenefitForTerm();
        NavManager.NavigateTo($"/CharacterCreation/RollAdvancement/{characterID}");
    }
    
    public int effectedStat = -1;
    public TravellerInjury ActualInjury = null;
    List<TravellerInjury> AppliedInjuries = new List<TravellerInjury>();
    public int InjuryChoice = -1;

    
    public bool NeedsMedicalAid = false;
    private EventCallback ApplyInjury(TravellerInjury injury)
    {
        if (effectedStat == -1)
        {
            effectedStat = 0;
        }

        var stats = GetService().GetEffectedAttributes(injury);

        NeedsMedicalAid = !GetService().ApplyTravellerInjury(injury, stats[effectedStat]);

        AppliedInjuries.Add(injury);
        return EventCallback.Empty;
    }
}
<body>
    <div style="text-align: center">
        <h1>Traveller Character Creator</h1>
        <h2>Select @GetService().Name's - Injury</h2>
        @if (GetService().LastEvent is TravellerEventSeverelyInjured injured)
        {
            if (ActualInjury == null)
            {
                ActualInjury = injured.GetSevereInjury(GetService().RollDice(1), GetService().RollDice(1));
            }
        }
        else if (GetService().LastEvent is TravellerEventInjury injuryEvnt)
        {
            if (ActualInjury == null)
            {
                ActualInjury = injuryEvnt.GetInjury(GetService().RollDice(1));
            }
        }


        @if (ActualInjury is TravellerMultiInjury mulInjur)
        {
            <ul>
                You suffer the following injuries:
                @foreach (var injur in mulInjur.Injuries)
                {
                    @if (AppliedInjuries.All(x => x != injur))
                    {
                        var stats = GetService().GetEffectedAttributes(injur);
                        <li>
                            @injur.InjuryDescription. Select stat to be effected:
                            <select @bind="effectedStat">
                                @for (var i = 0; i < stats.Count; i++)
                                {
                                    <option value="@i">@stats[i]</option>
                                }
                            </select>
                            <button @onclick="ApplyInjury(injur)">Apply Injury.</button>
                        </li>
                    }
                }
            </ul>


            <button @onclick="DoneEvent">Okay. [hit when all applied, I'm lazy]</button>
            
    }
    else if (ActualInjury is TravellerMultiInjuryChoice injChoice)
    {

        @if (AppliedInjuries.All(x => x != ActualInjury))
        {
            <p>
                Select an Injury:
                <select @bind="InjuryChoice">
                    @for (int i = 0; i < injChoice.InjuryCount; i++)
                    {
                        <option value="@i">@injChoice.Injuries[i]</option>
                    }
                </select>
            </p>
            <p>
                Select a stat to be effected:
                <select @bind="effectedStat">
                    @{
                        var injChoiceStats = GetService().GetEffectedAttributes(injChoice.Injuries[InjuryChoice]);
                        for (var i = 0; i < injChoiceStats.Count; i++)
                        {
                            <option value="@i">@injChoiceStats[i]</option>
                        }
                    }
                </select>
                <button @onclick="ApplyInjury(injChoice.Injuries[InjuryChoice])">Apply Injury.</button>
            </p>
        }
        else
        {

            <button @onclick="DoneEvent">Okay.</button>
        }
    }
    else
    {
        @if (AppliedInjuries.All(x => x != ActualInjury))
        {
            <p>
                You suffer: @ActualInjury.InjuryDescription. Select a stat to be effected:
                <select @bind="effectedStat">
                    @{
                        var injChoiceStats = GetService().GetEffectedAttributes(ActualInjury);
                        for (var i = 0; i < injChoiceStats.Count; i++)
                        {
                            <option value="@i">@injChoiceStats[i]</option>
                        }
                    }
                </select>
                <button @onclick="ApplyInjury(ActualInjury)">Apply Injury.</button>
            </p>
        }
        else
        {

            <button @onclick="DoneEvent">Okay.</button>
        }
    }

    </div>
</body>