@page "/CharacterCreation/Stats/{characterID}"
@using CharacterCreationTest.CharacterCreation
@using Microsoft.AspNetCore.Html
@using TravellerWiki.Data
@using TravellerWiki.Data.Charcters
@using TravellerWiki.Data.Services
@using TravellerWiki.Data.Services.CareerService
@inject NavigationManager NavManager
@inject MultiPageCharacterCreationService MultiCharacterCreationService
<head>
    <title>@this.ToString().Replace("TravellerWiki.Pages.", "") </title>

</head>

@code{
    [Parameter]
    public string characterID { get; set; }


    public Dictionary<int, int> GeneratedStats;
    private bool IncludePsi { get; set; }

    int StrKey = -1;
    bool setStr = false;

    bool setDex = false;
    int DexKey = -1;

    bool setEnd = false;
    int EndKey = -1;

    bool setInt = false;
    int IntKey = -1;

    bool setEdu = false;
    int EduKey = -1;

    bool setSoc = false;
    int SocKey = -1;

    bool setPsi = false;
    int PsiKey = -1;

    public bool HasNumberBeenUsed(int number)
    {
        return (setStr && number == StrKey) || (setDex && number == DexKey) || (setEnd && number == EndKey) ||
               (setInt && number == IntKey) || (setEdu && number == EduKey) || (setSoc && number == SocKey) ||
               (setPsi && number == PsiKey);
    }

    public bool SkillsSet() => !(setStr & setDex & setEnd & setInt & setEdu & setSoc & IncludePsi) || setPsi;


    public int GetFirstUnusedKey()
    {
        if (GeneratedStats == null)
        {
            GenerateStats();
        }

        foreach (var key in GeneratedStats)
        {
            if (!HasNumberBeenUsed(key.Key))
            {
                return key.Key;
            }
        }

        return -1;
    }

    public void GenerateStats()
    {
        GeneratedStats = GetService().GenerateStats(IncludePsi);

    }

    public void SetStat(TravellerAttributes attribute)
    {
        int StatValue = -1;
        switch (attribute)
        {
            case TravellerAttributes.Strength:
                if (StrKey == -1)
                {
                    StrKey = GetFirstUnusedKey();
                }
                StatValue = GeneratedStats[StrKey];
                setStr = true;


                break;
            case TravellerAttributes.Dexterity:
                if (DexKey == -1)
                {
                    DexKey = GetFirstUnusedKey();
                }

                StatValue = GeneratedStats[DexKey];
                setDex = true;

                break;
            case TravellerAttributes.Endurance:
                if (EndKey == -1)
                {
                    EndKey = GetFirstUnusedKey();
                }
                StatValue = GeneratedStats[EndKey];
                setEnd = true;

                break;
            case TravellerAttributes.Intelligence:
                if (IntKey == -1)
                {
                    IntKey = GetFirstUnusedKey();
                }
                StatValue = GeneratedStats[IntKey];
                setInt = true;

                break;
            case TravellerAttributes.Education:
                if (EduKey == -1)
                {
                    EduKey = GetFirstUnusedKey();
                }
                StatValue = GeneratedStats[EduKey];
                setEdu = true;

                break;
            case TravellerAttributes.Social:
                if (SocKey == -1)
                {
                    SocKey = GetFirstUnusedKey();
                }
                StatValue = GeneratedStats[SocKey];
                setSoc = true;

                break;
            case TravellerAttributes.Psionics:
                if (PsiKey == -1)
                {
                    PsiKey = GetFirstUnusedKey();
                }
                StatValue = GeneratedStats[PsiKey];
                setPsi = true;

                break;
            default:
                break;
        }

        GetService().AssignStat(new TravellerAttribute(attribute, StatValue));

    }

    public CharacterCreatorService GetService()
    {
        return MultiCharacterCreationService.GetCharacterCreatorService(characterID);
    }

    public void DoneStats()
    {
        NavManager.NavigateTo($"/CharacterCreation/Nationality/{characterID}");
    }

}
<body>

    <div style="text-align: center">
        <h1>Traveller Character Creator</h1>

        @if (GeneratedStats == null)
        {
            GenerateStats();
        }
        <h2>@GetService().Name: Stats</h2>

        <p>Roll: @GeneratedStats.Aggregate("", (h, t) => h += t.Value + ", ") Psi Roll: <input type="checkbox" @bind="IncludePsi" /></p>
        <button @onclick="GenerateStats">Generate new Attributes</button>
        <p>
            <ol>
                <li>
                    Strength:
                    @if (!setStr)
                    {
                        <select @bind="StrKey">
                            @foreach (var stat in GeneratedStats)
                            {
                                if (!HasNumberBeenUsed(stat.Key))
                                {
                                    <option value="@stat.Key">@stat.Value</option>
                                }
                            }
                        </select>
                        <button @onclick="() => { SetStat(TravellerAttributes.Strength); }">Set</button>
                    }
                    else
                    {
                        @GetService().GetTravellerAttribute(TravellerAttributes.Strength);
                    }
                </li>
                <li>
                    Dexterity:
                    @if (!setDex)
                    {
                        <select @bind="DexKey">
                            @foreach (var stat in GeneratedStats)
                            {
                                if (!HasNumberBeenUsed(stat.Key))
                                {
                                    <option value="@stat.Key">@stat.Value</option>
                                }
                            }
                        </select>
                        <button @onclick="() => { SetStat(TravellerAttributes.Dexterity); }">Set</button>
                    }
                    else
                    {
                        @GetService().GetTravellerAttribute(TravellerAttributes.Dexterity);
                    }
                </li>
                <li>
                    Endurance:
                    @if (!setEnd)
                    {
                        <select @bind="EndKey">
                            @foreach (var stat in GeneratedStats)
                            {
                                if (!HasNumberBeenUsed(stat.Key))
                                {
                                    <option value="@stat.Key">@stat.Value</option>
                                }
                            }
                        </select>
                        <button @onclick="() => { SetStat(TravellerAttributes.Endurance); }">Set</button>
                    }
                    else
                    {
                        @GetService().GetTravellerAttribute(TravellerAttributes.Endurance);
                    }
                </li>
                <li>
                    Intelligence:
                    @if (!setInt)
                    {
                        <select @bind="IntKey">
                            @foreach (var stat in GeneratedStats)
                            {
                                if (!HasNumberBeenUsed(stat.Key))
                                {
                                    <option value="@stat.Key">@stat.Value</option>
                                }
                            }
                        </select>
                        <button @onclick="() => { SetStat(TravellerAttributes.Intelligence); }">Set</button>
                    }
                    else
                    {
                        @GetService().GetTravellerAttribute(TravellerAttributes.Intelligence);
                    }
                </li>
                <li>
                    Education:
                    @if (!setEdu)
                    {
                        <select @bind="EduKey">
                            @foreach (var stat in GeneratedStats)
                            {
                                if (!HasNumberBeenUsed(stat.Key))
                                {
                                    <option value="@stat.Key">@stat.Value</option>
                                }
                            }
                        </select>
                        <button @onclick="() => { SetStat(TravellerAttributes.Education); }">Set</button>
                    }
                    else
                    {
                        @GetService().GetTravellerAttribute(TravellerAttributes.Education);
                    }
                </li>
                <li>
                    Social:
                    @if (!setSoc)
                    {
                        <select @bind="SocKey">
                            @foreach (var stat in GeneratedStats)
                            {
                                if (!HasNumberBeenUsed(stat.Key))
                                {
                                    <option value="@stat.Key">@stat.Value</option>
                                }
                            }
                        </select>
                        <button @onclick="() => { SetStat(TravellerAttributes.Social); }">Set</button>
                    }
                    else
                    {
                        @GetService().GetTravellerAttribute(TravellerAttributes.Social);
                    }
                </li>
                @if (IncludePsi)
                {
                    <li>
                        Psionics:
                        @if (!setPsi)
                        {
                            <select @bind="PsiKey">
                                @foreach (var stat in GeneratedStats)
                                {
                                    if (!HasNumberBeenUsed(stat.Key))
                                    {
                                        <option value="@stat.Key">@stat.Value</option>
                                    }
                                }
                            </select>
                            <button @onclick="() => { SetStat(TravellerAttributes.Psionics); }">Set</button>
                        }
                        else
                        {
                            @GetService().GetTravellerAttribute(TravellerAttributes.Psionics);
                        }
                    </li>
                }
            </ol>
            <button @onclick="DoneStats">Finished Stats</button>
        </p>
    </div>
</body>