@page "/CharacterCreation/Injury/{characterID}"
@using CharacterCreationTest.CharacterCreation
@using TravellerWiki.Data
@using TravellerWiki.Data.Charcters
@using TravellerWiki.Data.CreationEvents
@using TravellerWiki.Data.Services
@using TravellerWiki.Data.TravellerInjuries
@namespace TravellerWiki.Pages.CharacterCreation.CharacterCreator
@inject NavigationManager NavManager
@inject MultiPageCharacterCreationService MultiCharacterCreationService
@inject TravellerNationsCharacterInfoService nationsService;
<head>
    <title>@this.ToString().Replace("TravellerWiki.Pages.", "") </title>

</head>

@code{
    [Parameter]
    public string CharacterID { get; set; }

    [Parameter]
    public string NextURL { get; set; }

    public CharacterCreatorService GetService()
    {
        return MultiCharacterCreationService.GetCharacterCreatorService(CharacterID);
    }

    public void DoneEvent()
    {
        GetService().GainBenefitForTerm();
        NavManager.NavigateTo(NextURL + $"/{CharacterID}");
    }

    public int effectedStat = -1;
    public TravellerInjury ActualInjury = null;
    List<TravellerInjury> AppliedInjuries = new List<TravellerInjury>();
    public int InjuryChoice = 0;
    bool SelectedInjury = false;


    public bool NeedsMedicalAid = false;
    private void ApplyNormalInjury()
    {
        SelectedInjury = true;
        ApplyInjury(ActualInjury);
    }

    private bool ApplyInjury(TravellerInjury injury)
    {

        if (effectedStat == -1)
        {
            effectedStat = 0;
        }

        var stats = GetService().GetEffectedAttributes(injury);

        NeedsMedicalAid = !GetService().ApplyTravellerInjury(injury, stats[effectedStat]);

        return NeedsMedicalAid;
    }

    public void ApplyMultiInjury()
    {
        if (InjuryChoice == -1)
        {
            InjuryChoice = 0;
        }

        var injury = ((TravellerMultiInjury)ActualInjury).Injuries[InjuryChoice];
        ApplyInjury(injury);

        SelectedInjury = true;
        ((TravellerMultiInjury)ActualInjury).ResolveInjury(injury);
    }
}
<div>
    <div style="padding-left: 2em;">
        @if (GetService().LastEvent is TravellerEventSeverelyInjured injured)
        {
            if (ActualInjury == null)
            {
                ActualInjury = injured.GetSevereInjury(GetService().RollDice(1), GetService().RollDice(1));
            }
        }
        else if (GetService().LastEvent is TravellerEventInjury injuryEvnt)
        {
            if (ActualInjury == null)
            {
                ActualInjury = injuryEvnt.GetInjury(GetService().RollDice(1));
            }
        }


        @if (ActualInjury is TravellerMultiInjury mulInjur)
        {
            @if (mulInjur.Injuries.Count > 0)
            {
                <p>
                    You suffer the following injuries:
                    <ul>
                        @foreach (var inj in mulInjur.Injuries)
                        {
                            if (inj is TravellerInjurySpecific spec)
                            {
                                <li>@spec.InjuryDescription: @spec.InjuryDamage</li>
                            }
                            else if (inj is TravellerInjuryMental ment)
                            {
                                <li>@ment.InjuryDescription: @ment.InjuryDamage</li>
                            }
                            else if (inj is TravellerInjury norm)
                            {
                                <li>@norm.InjuryDescription: @norm.InjuryDamage</li>
                            }
                        }

                    </ul>
                </p>
                <p>
                    Select injury to deal with
                    <select @bind="InjuryChoice">
                        @for (var i = 0; i < mulInjur.Injuries.Count; i++)
                        {
                            <option value="@i">@mulInjur.Injuries[i].InjuryDescription</option>
                        }
                    </select>
                </p>
                <p>
                    @{
                        if (InjuryChoice > mulInjur.Injuries.Count && InjuryChoice < 0)
                        {
                            InjuryChoice = 0;
                        }
                        var stats = GetService().GetEffectedAttributes(mulInjur.Injuries[InjuryChoice]);
                    }

                    Select stat to be effected:
                    <select @bind="effectedStat">
                        @for (var j = 0; j < stats.Count; j++)
                        {
                            <option value="@j">@stats[j]</option>
                        }
                    </select>
                    <button @onclick="ApplyMultiInjury">Apply Injury.</button>
                </p>
            }
            else
            {
                <button @onclick="DoneEvent">Okay.</button>
            }

    }
    else if (ActualInjury is TravellerMultiInjuryChoice injChoice)
    {
        @if (SelectedInjury)
        {

            <button @onclick="DoneEvent">Okay.</button>
        }
        else
        {
            <p>
                Select an Injury:
                <select @bind="InjuryChoice">
                    @for (int i = 0; i < injChoice.InjuryCount; i++)
                    {
                        <option value="@i">@injChoice.Injuries[i]</option>
                    }
                </select>
            </p>
            <p>
                Select a stat to be effected:
                <select @bind="effectedStat">
                    @{
                        var injChoiceStats = GetService().GetEffectedAttributes(injChoice.Injuries[InjuryChoice]);
                        for (var i = 0; i < injChoiceStats.Count; i++)
                        {
                            <option value="@i">@injChoiceStats[i]</option>
                        }
                    }
                </select>
                <button @onclick="ApplyMultiInjury">Apply Injury.</button>
            </p>
        }
    }
    else
    {
        @if (SelectedInjury)
        {

            <button @onclick="DoneEvent">Okay.</button>
        }
        else
        {
            <p>
                You suffer: @ActualInjury.InjuryDescription. Select a stat to be effected:
                <select @bind="effectedStat">
                    @{
                        var injChoiceStats = GetService().GetEffectedAttributes(ActualInjury);
                        for (var i = 0; i < injChoiceStats.Count; i++)
                        {
                            <option value="@i">@injChoiceStats[i]</option>
                        }
                    }
                </select>
                <button @onclick="ApplyNormalInjury">Apply Injury.</button>
            </p>
        }

    }

    </div>
</div>